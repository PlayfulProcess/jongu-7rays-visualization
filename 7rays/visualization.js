// Seven Rays & Seven Planes Interactive Visualization
// Dynamic relationship visualization system

class SevenRaysVisualizer {
    constructor() {
        this.raysData = null;
        this.planesData = null;
        this.relationshipsData = null;
        this.currentContext = 'human';
        this.fourthEmphasis = false;
        this.isAnimating = false;
        
        this.init();
    }
    
    async init() {
        try {
            // Load the data generated by Python scripts
            await this.loadData();
            this.setupEventListeners();
            this.createVisualizations();
        } catch (error) {
            console.error('Failed to initialize visualization:', error);
            this.showError('Failed to load data. Please ensure the Python scripts have generated the required JSON files.');
        }
    }
    
    async loadData() {
        // For now, we'll use embedded data since we can't load JSON files directly
        // In a real deployment, these would be loaded from the generated JSON files
        this.raysData = this.getEmbeddedRaysData();
        this.planesData = this.getEmbeddedPlanesData();
        this.relationshipsData = this.getEmbeddedRelationshipsData();
    }
    
    getEmbeddedRaysData() {
        return {
            1: { name: "Will or Power", color: "#FF0000", quality: "Will to manifest, Divine Purpose, Leadership" },
            2: { name: "Love-Wisdom", color: "#0066FF", quality: "Inclusive love, Wisdom through experience" },
            3: { name: "Active Intelligence", color: "#FFFF00", quality: "Creative intelligence, Adaptability" },
            4: { name: "Harmony through Conflict", color: "#00FF00", quality: "Beauty, Art, Bridge-building, Mediation" },
            5: { name: "Concrete Knowledge", color: "#FF8000", quality: "Science, Research, Precision" },
            6: { name: "Devotion and Idealism", color: "#FF00FF", quality: "Devotion, Idealism, Religious fervor" },
            7: { name: "Ceremonial Order", color: "#8000FF", quality: "Organization, Ritual, Magic, Transformation" }
        };
    }
    
    getEmbeddedPlanesData() {
        return {
            1: { name: "Logoic Plane", color: "#FFFFFF", consciousness_state: "Logoic consciousness, Divine Will" },
            2: { name: "Monadic Plane", color: "#E6E6FA", consciousness_state: "Monadic consciousness, Divine Love-Wisdom" },
            3: { name: "Atmic Plane", color: "#FFD700", consciousness_state: "Spiritual will, Atmic consciousness" },
            4: { name: "Buddhic Plane", color: "#00BFFF", consciousness_state: "Intuitional consciousness, Unity perception" },
            5: { name: "Mental Plane", color: "#FFFF00", consciousness_state: "Abstract and concrete thought" },
            6: { name: "Astral Plane", color: "#FF69B4", consciousness_state: "Emotional consciousness, Desire" },
            7: { name: "Physical Plane", color: "#8B4513", consciousness_state: "Physical consciousness, Material awareness" }
        };
    }
    
    getEmbeddedRelationshipsData() {
        // Simplified relationship matrix based on the analysis
        const relationships = [];
        for (let ray = 1; ray <= 7; ray++) {
            for (let plane = 1; plane <= 7; plane++) {
                const strength = this.calculateRelationshipStrength(ray, plane);
                relationships.push({
                    ray: ray,
                    plane: plane,
                    strength: strength,
                    interaction_type: this.getInteractionType(strength),
                    color_blend: this.calculateColorBlend(ray, plane, strength)
                });
            }
        }
        return relationships;
    }
    
    calculateRelationshipStrength(ray, plane) {
        // Primary correspondences
        const primaryPairs = {
            '1,1': 0.9, '1,7': 0.8,
            '2,2': 0.9, '2,6': 0.7,
            '3,3': 0.9, '3,5': 0.8,
            '4,4': 1.0,
            '5,5': 0.9,
            '6,6': 0.9,
            '7,7': 0.9
        };
        
        const key = `${ray},${plane}`;
        if (primaryPairs[key]) {
            return primaryPairs[key];
        }
        
        // Secondary relationships
        const diff = Math.abs(ray - plane);
        if (diff === 0) return 0.9;
        if (diff <= 2) return 0.4 + Math.random() * 0.2;
        return 0.1 + Math.random() * 0.2;
    }
    
    getInteractionType(strength) {
        if (strength > 0.8) return 'primary_channel';
        if (strength > 0.6) return 'strong_influence';
        if (strength > 0.4) return 'moderate_interaction';
        if (strength > 0.2) return 'subtle_resonance';
        return 'minimal_connection';
    }
    
    calculateColorBlend(ray, plane, strength) {
        const rayColor = this.raysData[ray].color;
        const planeColor = this.planesData[plane].color;
        return this.blendColors(rayColor, planeColor, strength);
    }
    
    blendColors(color1, color2, ratio) {
        const hex1 = color1.replace('#', '');
        const hex2 = color2.replace('#', '');
        
        const r1 = parseInt(hex1.substr(0, 2), 16);
        const g1 = parseInt(hex1.substr(2, 2), 16);
        const b1 = parseInt(hex1.substr(4, 2), 16);
        
        const r2 = parseInt(hex2.substr(0, 2), 16);
        const g2 = parseInt(hex2.substr(2, 2), 16);
        const b2 = parseInt(hex2.substr(4, 2), 16);
        
        const r = Math.round(r1 * ratio + r2 * (1 - ratio));
        const g = Math.round(g1 * ratio + g2 * (1 - ratio));
        const b = Math.round(b1 * ratio + b2 * (1 - ratio));
        
        return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
    }
    
    setupEventListeners() {
        const contextSelect = document.getElementById('contextSelect');
        const cycleSelect = document.getElementById('cycleSelect');
        const fourthBtn = document.getElementById('fourthEmphasisBtn');
        const animateBtn = document.getElementById('animateBtn');
        
        contextSelect.addEventListener('change', () => {
            this.currentContext = contextSelect.value;
            this.updateVisualizations();
        });
        
        cycleSelect.addEventListener('change', () => {
            this.updateVisualizations();
        });
        
        fourthBtn.addEventListener('click', () => {
            this.fourthEmphasis = !this.fourthEmphasis;
            fourthBtn.textContent = this.fourthEmphasis ? 'Disable Fourth Emphasis' : 'Toggle Fourth Emphasis';
            this.updateVisualizations();
        });
        
        animateBtn.addEventListener('click', () => {
            this.toggleAnimation();
        });
    }
    
    createVisualizations() {
        this.createRayVisualization();
        this.createPlaneVisualization();
        this.createRelationshipMatrix();
    }
    
    createRayVisualization() {
        const container = d3.select('#rayChart');
        container.selectAll('*').remove();
        
        const width = container.node().clientWidth;
        const height = container.node().clientHeight;
        
        const svg = container.append('svg')
            .attr('width', width)
            .attr('height', height);
        
        const radius = Math.min(width, height) / 2 - 40;
        const centerX = width / 2;
        const centerY = height / 2;
        
        // Create ray circles arranged in a circle
        const angleStep = (2 * Math.PI) / 7;
        
        Object.entries(this.raysData).forEach(([rayNum, rayData], index) => {
            const angle = index * angleStep - Math.PI / 2;
            const x = centerX + Math.cos(angle) * radius * 0.7;
            const y = centerY + Math.sin(angle) * radius * 0.7;
            
            const group = svg.append('g')
                .attr('transform', `translate(${x}, ${y})`)
                .style('cursor', 'pointer');
            
            const circle = group.append('circle')
                .attr('r', 25)
                .attr('fill', rayData.color)
                .attr('stroke', '#ffffff')
                .attr('stroke-width', 2)
                .attr('opacity', 0.8)
                .style('filter', rayNum == 4 && this.fourthEmphasis ? 'drop-shadow(0 0 10px #00ff00)' : 'none');
            
            group.append('text')
                .attr('text-anchor', 'middle')
                .attr('dy', '0.35em')
                .attr('fill', '#ffffff')
                .attr('font-weight', 'bold')
                .attr('font-size', '16px')
                .text(rayNum);
            
            group.append('text')
                .attr('text-anchor', 'middle')
                .attr('dy', '45px')
                .attr('fill', '#e0e6ed')
                .attr('font-size', '12px')
                .text(rayData.name);
            
            // Add interactivity
            group
                .on('mouseover', (event) => this.showTooltip(event, `Ray ${rayNum}: ${rayData.name}`, rayData.quality))
                .on('mouseout', () => this.hideTooltip())
                .on('click', () => this.highlightRayRelationships(rayNum));
        });
        
        // Add center label
        svg.append('text')
            .attr('x', centerX)
            .attr('y', centerY)
            .attr('text-anchor', 'middle')
            .attr('fill', '#ffd700')
            .attr('font-size', '14px')
            .attr('font-weight', 'bold')
            .text('Seven Rays');
    }
    
    createPlaneVisualization() {
        const container = d3.select('#planeChart');
        container.selectAll('*').remove();
        
        const width = container.node().clientWidth;
        const height = container.node().clientHeight;
        
        const svg = container.append('svg')
            .attr('width', width)
            .attr('height', height);
        
        // Create vertical arrangement of planes (higher to lower)
        const planeHeight = (height - 80) / 7;
        const planeWidth = width - 80;
        
        Object.entries(this.planesData).forEach(([planeNum, planeData], index) => {
            const y = 40 + index * planeHeight + planeHeight / 2;
            const x = width / 2;
            
            const group = svg.append('g')
                .attr('transform', `translate(${x}, ${y})`)
                .style('cursor', 'pointer');
            
            // Create plane as horizontal bar
            const rect = group.append('rect')
                .attr('x', -planeWidth / 2)
                .attr('y', -15)
                .attr('width', planeWidth)
                .attr('height', 30)
                .attr('fill', planeData.color)
                .attr('stroke', '#ffffff')
                .attr('stroke-width', 1)
                .attr('opacity', 0.7)
                .style('filter', planeNum == 4 && this.fourthEmphasis ? 'drop-shadow(0 0 10px #00bfff)' : 'none');
            
            group.append('text')
                .attr('text-anchor', 'middle')
                .attr('dy', '0.35em')
                .attr('fill', '#000000')
                .attr('font-weight', 'bold')
                .attr('font-size', '14px')
                .text(`${planeNum}. ${planeData.name}`);
            
            // Add interactivity
            group
                .on('mouseover', (event) => this.showTooltip(event, `Plane ${planeNum}: ${planeData.name}`, planeData.consciousness_state))
                .on('mouseout', () => this.hideTooltip())
                .on('click', () => this.highlightPlaneRelationships(planeNum));
        });
    }
    
    createRelationshipMatrix() {
        const container = d3.select('#relationshipMatrix');
        container.selectAll('*').remove();
        
        const width = container.node().clientWidth;
        const height = container.node().clientHeight;
        
        const svg = container.append('svg')
            .attr('width', width)
            .attr('height', height);
        
        const margin = { top: 60, right: 60, bottom: 60, left: 60 };
        const cellWidth = (width - margin.left - margin.right) / 7;
        const cellHeight = (height - margin.top - margin.bottom) / 7;
        
        // Create the matrix
        this.relationshipsData.forEach(rel => {
            const x = margin.left + (rel.ray - 1) * cellWidth;
            const y = margin.top + (rel.plane - 1) * cellHeight;
            
            const opacity = rel.strength;
            const color = this.getRelationshipColor(rel.strength);
            
            const cell = svg.append('rect')
                .attr('x', x)
                .attr('y', y)
                .attr('width', cellWidth)
                .attr('height', cellHeight)
                .attr('fill', color)
                .attr('opacity', opacity)
                .attr('stroke', '#ffffff')
                .attr('stroke-width', 0.5)
                .style('cursor', 'pointer')
                .style('filter', (rel.ray == 4 || rel.plane == 4) && this.fourthEmphasis ? 
                    'drop-shadow(0 0 8px #ffffff) brightness(1.5)' : 'none');
            
            // Add strength text for strong relationships
            if (rel.strength > 0.6) {
                svg.append('text')
                    .attr('x', x + cellWidth / 2)
                    .attr('y', y + cellHeight / 2)
                    .attr('text-anchor', 'middle')
                    .attr('dy', '0.35em')
                    .attr('fill', '#ffffff')
                    .attr('font-size', '10px')
                    .attr('font-weight', 'bold')
                    .text(rel.strength.toFixed(2));
            }
            
            // Add interactivity
            cell
                .on('mouseover', (event) => this.showRelationshipTooltip(event, rel))
                .on('mouseout', () => this.hideTooltip());
        });
        
        // Add axis labels
        for (let i = 1; i <= 7; i++) {
            // Ray labels (top)
            svg.append('text')
                .attr('x', margin.left + (i - 0.5) * cellWidth)
                .attr('y', margin.top - 10)
                .attr('text-anchor', 'middle')
                .attr('fill', '#ffd700')
                .attr('font-size', '14px')
                .attr('font-weight', 'bold')
                .text(`R${i}`);
            
            // Plane labels (left)
            svg.append('text')
                .attr('x', margin.left - 10)
                .attr('y', margin.top + (i - 0.5) * cellHeight)
                .attr('text-anchor', 'middle')
                .attr('dy', '0.35em')
                .attr('fill', '#4ecdc4')
                .attr('font-size', '14px')
                .attr('font-weight', 'bold')
                .text(`P${i}`);
        }
        
        // Add title labels
        svg.append('text')
            .attr('x', width / 2)
            .attr('y', 25)
            .attr('text-anchor', 'middle')
            .attr('fill', '#ffd700')
            .attr('font-size', '16px')
            .attr('font-weight', 'bold')
            .text('Rays →');
        
        svg.append('text')
            .attr('x', 20)
            .attr('y', height / 2)
            .attr('text-anchor', 'middle')
            .attr('transform', `rotate(-90, 20, ${height / 2})`)
            .attr('fill', '#4ecdc4')
            .attr('font-size', '16px')
            .attr('font-weight', 'bold')
            .text('Planes ↓');
    }
    
    getRelationshipColor(strength) {
        if (strength > 0.8) return '#ff0000';
        if (strength > 0.6) return '#ff8800';
        if (strength > 0.4) return '#ffaa00';
        if (strength > 0.2) return '#0088ff';
        return '#888888';
    }
    
    showTooltip(event, title, description) {
        const tooltip = document.getElementById('tooltip');
        tooltip.innerHTML = `<strong>${title}</strong><br>${description}`;
        tooltip.style.display = 'block';
        tooltip.style.left = (event.pageX + 10) + 'px';
        tooltip.style.top = (event.pageY + 10) + 'px';
    }
    
    showRelationshipTooltip(event, rel) {
        const tooltip = document.getElementById('tooltip');
        const rayName = this.raysData[rel.ray].name;
        const planeName = this.planesData[rel.plane].name;
        
        tooltip.innerHTML = `
            <strong>Ray ${rel.ray} ↔ Plane ${rel.plane}</strong><br>
            ${rayName} → ${planeName}<br>
            Strength: ${rel.strength.toFixed(2)}<br>
            Type: ${rel.interaction_type.replace('_', ' ')}
        `;
        tooltip.style.display = 'block';
        tooltip.style.left = (event.pageX + 10) + 'px';
        tooltip.style.top = (event.pageY + 10) + 'px';
    }
    
    hideTooltip() {
        document.getElementById('tooltip').style.display = 'none';
    }
    
    highlightRayRelationships(rayNum) {
        // Highlight all relationships for this ray
        console.log(`Highlighting relationships for Ray ${rayNum}`);
    }
    
    highlightPlaneRelationships(planeNum) {
        // Highlight all relationships for this plane
        console.log(`Highlighting relationships for Plane ${planeNum}`);
    }
    
    updateVisualizations() {
        // Regenerate relationships based on current context
        this.relationshipsData = this.getEmbeddedRelationshipsData();
        this.createVisualizations();
    }
    
    toggleAnimation() {
        this.isAnimating = !this.isAnimating;
        const btn = document.getElementById('animateBtn');
        btn.textContent = this.isAnimating ? 'Stop Animation' : 'Animate Relationships';
        
        if (this.isAnimating) {
            this.startAnimation();
        } else {
            this.stopAnimation();
        }
    }
    
    startAnimation() {
        // Add pulsing animation to strong relationships
        d3.selectAll('rect')
            .filter(function(d, i) {
                return d3.select(this).attr('opacity') > 0.6;
            })
            .classed('pulse', true);
    }
    
    stopAnimation() {
        d3.selectAll('.pulse').classed('pulse', false);
    }
    
    showError(message) {
        const container = document.querySelector('.container');
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            background: rgba(255, 0, 0, 0.1);
            border: 1px solid #ff0000;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
            color: #ff6b6b;
            text-align: center;
        `;
        errorDiv.innerHTML = `<strong>Error:</strong> ${message}`;
        container.insertBefore(errorDiv, container.firstChild);
    }
}

// Initialize the visualization when the page loads
document.addEventListener('DOMContentLoaded', () => {
    new SevenRaysVisualizer();
});